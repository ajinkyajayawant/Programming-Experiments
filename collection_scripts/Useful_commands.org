This document consists of the commands that I have found useful for computer maintenance or programming tasks.

* Linux
** Directory structure
*** Paths where softwares and libraries are installed
#+BEGIN_SRC shell
/usr/local/
/usr/
~/.local/
#+END_SRC
** Operating system information
Sometimes when you are looking at package compatibilities, thinking of installing a new system, it helps if you can quickly look up the details of the current system. That can be achieved with:
#+BEGIN_SRC shell
cat /etc/issue
cat /etc/linuxmint/info
cat /etc/os-release
inxi -S
#+END_SRC
** Moving around
Change directory into previous directory:
#+BEGIN_SRC shell
  cd -
#+END_SRC
See the directory structure:
#+BEGIN_SRC shell
tree
#+END_SRC
** Apt package manager
Usually it is convenient to update, upgrade, and atuoremove at the same time. For that
#+BEGIN_SRC shell
sudo apt update && yes | sudo apt upgrade && sudo apt autoremove
#+END_SRC
** Grub
Sometimes either intentionally or by mistake, you replace the bootloader that came with the computer when you bought it, with Grub. Grub is the bootloader for distributions like Ubuntu which are derived from Debian. Moving forward for live USB installation or errors while bootloading, it is necessary to be able to work with grub. Here are a few commands and procedures that I have found useful.
- Press escape for the grub menu to appear
- Use ls to see the hardware disks available
- Use cat to see contents of files:
  #+BEGIN_SRC shell
    cat (hd0)/boot/
  #+END_SRC
- To see the files from a particular disk, do:
  #+BEGIN_SRC shell
    ls (hd0)/boot/
  #+END_SRC
  and press tab to see options
- To specify the OS to boot from the usb do:
  #+BEGIN_SRC shell
    set root=(hd0) <or other diskname as needed>
    chainloader (hd0)/efi/boot/grub64.efi
  #+END_SRC
To invoke the new bootloader:
#+BEGIN_SRC shell
boot
#+END_SRC
** Miscellaneous sytem tasks
Get the time:
#+BEGIN_SRC shell
date +"%r"
#+END_SRC
Backlight to minimum:
#+BEGIN_SRC shell
xbacklight -set 10
#+END_SRC
Turn off display(can be set up as keyboard shortcut shit+F1)
#+BEGIN_SRC shell
xset dpms force off
#+END_SRC
To interchange two keys on keyboard:
#+BEGIN_SRC shell
xev
# (state 0x10, keycode 110 (keysym 0xff55, Prior), same_screen YES,)
xmodmap -e "keycode 110 = Next"
setxkbmap -option ctrl:swapcaps
#+END_SRC
The last one always works for me. Needs to be run again after plugging in a new keyboard
Rotate screen:
#+BEGIN_SRC shell
xrandr --output LVDS1 --rotate left
xrandr --output LVDS1 --rotate right
xrandr --output LVDS1 --rotate inverted
xrandr --output LVDS1 --rotate normal
#+END_SRC
Find display information:
#+BEGIN_SRC shell
xrandr
#+END_SRC
Convenient time format for Orage clock:
#+BEGIN_SRC shell
%I:%M p%
#+END_SRC
*** Timed commands
To run a command at a particular time:
#+BEGIN_SRC shell
at 10:10
ls -l > /tmp/ls_output.txt
Ctrl-D
#+END_SRC
To avoid the prompt just do
#+BEGIN_SRC shell
echo "ls -l > /tmp/ls_output" | at 10:10
#+END_SRC
To view all at commands do:
#+BEGIN_SRC shell
atq
#+END_SRC
To remove an at command do:
#+BEGIN_SRC shell
at -r <at id>
#+END_SRC


* Softwares
** Git
Initialize git in a directory:
#+BEGIN_SRC shell
git init
#+END_SRC
*** Branches
Create a new branch:
#+BEGIN_SRC shell
git branch <new branch name>
#+END_SRC
Get all git branch details:
#+BEGIN_SRC shell
git branch -av
#+END_SRC
To rename a local branch, checkout the old branch and run:
#+BEGIN_SRC shell
git branch -m <new-name>
#+END_SRC
Or to rename from the master branch use the command:
#+BEGIN_SRC shell
git branch -m <old-name> <new-name>
#+END_SRC
Deleting branches locally when you mess it up
#+BEGIN_SRC shell
git branch -d <local_branch_1> <local_branch_2>
#+END_SRC
To delete a branch from the online repository:
#+BEGIN_SRC shell
git push <remote> --delete <branch>
#+END_SRC
Compare two branches git:
#+BEGIN_SRC shell
git diff <branch1>..<branch2>
#+END_SRC
** Pdftk
Join multiple pages:
#+BEGIN_SRC shell
pdftk pg_1.pdf pg_2.pdf pg_3.pdf cat output pg_all.pdf
#+END_SRC
Rotate a page by 180 deg:
#+BEGIN_SRC shell
pdftk pg.pdf cat 1-endsouth output pg1.pdf
#+END_SRC
Rotate by 90 degrees clockwise:
#+BEGIN_SRC shell
pdftk <input filename>.pdf cat 1-endeast output <output filename>.pdf
#+END_SRC
Strip a pdf of its annotations and highlights:
#+BEGIN_SRC shell
pdftk <input>.pdf output uncompressed.pdf uncompress
LANG=C sed -n '/^\/Annots/!p' uncompressed.pdf > stripped.pdf
pdftk stripped.pdf output final.pdf compress
#+END_SRC
** Emacs
Find the version:
#+BEGIN_SRC elisp
M-x emacs-version
#+END_SRC
The cut, copy, and paste commands are the following in emacs:
Cut:
#+BEGIN_SRC elisp
M-x kill-region
#+END_SRC
Copy:
#+BEGIN_SRC elisp
M-x kill-ring-save
#+END_SRC
Paste:
#+BEGIN_SRC elisp
M-x yank
#+END_SRC
Count words and lines:
#+BEGIN_SRC elisp
M-x count-words
M-x count-lines
#+END_SRC
Show cursor position(especially column number) momentarily:
#+BEGIN_SRC elisp
M-x what-cursor-position
#+END_SRC
Open file in view/read only mode:
#+BEGIN_SRC elisp
M-x view-file
#+END_SRC
Convert and already opened file into view mode:
#+BEGIN_SRC elisp
M-x view-mode
#+END_SRC
view-file has its special shortcuts like q which exits the view mode. So a better solution in later versions of emacs is:
#+BEGIN_SRC elisp
M-x read-only-mode
#+END_SRC
*** Rectangle commands
For cutting rectangle, mark one corner of the rectangle go to the other end and do
#+BEGIN_SRC elisp
M-x kill-rectangle
#+END_SRC
Copy a rectangle:
#+BEGIN_SRC elisp
M-x copy-rectangle-as-kill
#+END_SRC
Paste the copied rectangle starting at the position of cursor(no need to select the region here)
#+BEGIN_SRC elisp
M-x yank-rectangle
#+END_SRC
For inserting text in a rectangle:
#+BEGIN_SRC elisp
M-x string-insert-rectangle RET string RET
#+END_SRC
Replace rectangle:
#+BEGIN_SRC elisp
M-x string-rectangle
#+END_SRC
*** Dired
Deleting backup files: Open dired, press ~​~​~ (flags all backup files), press ~x~, confirm
Deleting backup files recursively:
#+BEGIN_SRC elisp
M-x find-name-dired
#+END_SRC
select directory, file pattern ~*​~​~ and repeat the procedure above
Open file in read only mode from terminal:
#+BEGIN_SRC shell
emacsclient --create-frame --eval '(view-file "<filename>")'
#+END_SRC
A file opened from gui closes all the frames when I close that buffer. A better option is to create an emacsclient frame assuming a server exists:
#+BEGIN_SRC shell
emacsclient --create-frame &
#+END_SRC
Opening file from dired:
#+BEGIN_SRC elisp
M-x dired
#+END_SRC
specify directory, press enter on a file.
Creating a new diretory in dired mode - Once in dired mode press ~+~
Easy way to rename files in dired: Press ~R~, it prompts for the filename to rename to. Press downarrow if you want to access the earlier filename. Change the filename and press enter.
To rename files in dired:
#+BEGIN_SRC elisp
%R <original file name> <new file name>
#+END_SRC
Dired go up a directory: ~^~
Dired remove the delete flag: ~u~
