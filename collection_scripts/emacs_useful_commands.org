* Emacs
Find the version:
#+BEGIN_SRC elisp
M-x emacs-version
#+END_SRC
The cut, copy, and paste commands are the following in emacs:
Cut:
#+BEGIN_SRC elisp
M-x kill-region
#+END_SRC
Copy:
#+BEGIN_SRC elisp
M-x kill-ring-save
#+END_SRC
Paste:
#+BEGIN_SRC elisp
M-x yank
#+END_SRC
Count words and lines:
#+BEGIN_SRC elisp
M-x count-words
M-x count-lines
#+END_SRC
Show cursor position(especially column number) momentarily:
#+BEGIN_SRC elisp
M-x what-cursor-position
#+END_SRC
Open file in view/read only mode:
#+BEGIN_SRC elisp
M-x view-file
#+END_SRC
Convert and already opened file into view mode:
#+BEGIN_SRC elisp
M-x view-mode
#+END_SRC
view-file has its special shortcuts like q which exits the view mode. So a better solution in later versions of emacs is:
#+BEGIN_SRC elisp
M-x read-only-mode
#+END_SRC
To have a ruler on top of emacs to measure row width:
#+BEGIN_SRC elisp
  M-x ruler-mode
#+END_SRC
The variable that controls where the line will wrap is:
#+BEGIN_SRC elisp
M-x fill-column
#+END_SRC
To set the fill column variable you can use the function:
#+BEGIN_SRC elisp
  M-x set-fill-column
#+END_SRC
** Rectangle commands
For cutting rectangle, mark one corner of the rectangle go to the other end and do
#+BEGIN_SRC elisp
M-x kill-rectangle
#+END_SRC
Copy a rectangle:
#+BEGIN_SRC elisp
M-x copy-rectangle-as-kill
#+END_SRC
Paste the copied rectangle starting at the position of cursor(no need to select the region here)
#+BEGIN_SRC elisp
M-x yank-rectangle
#+END_SRC
For inserting text in a rectangle:
#+BEGIN_SRC elisp
M-x string-insert-rectangle RET string RET
#+END_SRC
Replace rectangle:
#+BEGIN_SRC elisp
M-x string-rectangle
#+END_SRC
** Dired
Deleting backup files: Open dired, press ~​~​~ (flags all backup files), press ~x~, confirm
Deleting backup files recursively:
#+BEGIN_SRC elisp
M-x find-name-dired
#+END_SRC
select directory, file pattern ~*​~​~ and repeat the procedure above
Open file in read only mode from terminal:
#+BEGIN_SRC shell
emacsclient --create-frame --eval '(view-file "<filename>")'
#+END_SRC
A file opened from gui closes all the frames when I close that buffer. A better option is to create an emacsclient frame assuming a server exists:
#+BEGIN_SRC shell
emacsclient --create-frame &
#+END_SRC
Opening file from dired:
#+BEGIN_SRC elisp
M-x dired
#+END_SRC
specify directory, press enter on a file.
Creating a new diretory in dired mode - Once in dired mode press ~+~
Easy way to rename files in dired: Press ~R~, it prompts for the filename to rename to. Press downarrow if you want to access the earlier filename. Change the filename and press enter.
To rename files in dired:
#+BEGIN_SRC elisp
%R <original file name> <new file name>
#+END_SRC
Dired go up a directory: ~^~
Dired remove the delete flag: ~u~
** Tables
Insert table:
#+BEGIN_SRC elisp
M-x table-insert
#+END_SRC
Insert row:
#+BEGIN_SRC elisp
M-x table-insert-row table-delete-row
#+END_SRC
Insert/delete column:
#+BEGIN_SRC elisp
  M-x table-insert-column
  M-x table-delete-column
#+END_SRC
** Calculator
To start the calculator:
#+BEGIN_SRC elisp
M-x calc
#+END_SRC
For infix type of operations use apostrphe operator, for example: ~'2+3~
** Magit
To start magit run:
#+BEGIN_SRC elisp
  magit-status
#+END_SRC
To refresh the status, can use(g):
#+BEGIN_SRC elisp
  magit-refresh
#+END_SRC
To fold and unfold entries use ~TAB~
To see all the remotes, open a split window and use the command(y):
#+BEGIN_SRC elisp
  magit-show-refs
#+END_SRC
To fetch use the command(f):
#+BEGIN_SRC elisp
magit-fetch
#+END_SRC
To pull use the command(F):
#+BEGIN_SRC elisp
magit-pull
#+END_SRC
To checkout a branch use the command(bound to b):
#+BEGIN_SRC elisp
magit-branch
#+END_SRC
To delete branches, whether local or remote, point at that branch and give the following command(b m):
#+BEGIN_SRC elisp
magit-branch-delete
#+END_SRC
See an ascii visualization of commits and branches:
#+BEGIN_SRC elisp
magit-log
#+END_SRC
To stage(add) changes, go the the corresponding unstaged entry and use the command(s):
#+BEGIN_SRC elisp
magit-stage
#+END_SRC
To unstage changes (u):
#+BEGIN_SRC elisp
magit-unstage
#+END_SRC
To commit the changes(c):
#+BEGIN_SRC elisp
magit-commit
#+END_SRC
After the magit-commit command you will first get the diff buffer. If that is okay, press the ~c~ key which will then take you to the commit buffer.
After writing the text for the commit use the command:
#+BEGIN_SRC elisp
with-editor-finish
#+END_SRC
To save a stash use the following and follow up with the prompts(z):
#+BEGIN_SRC elisp
  magit-stash
#+END_SRC
Amend a commit:
#+BEGIN_SRC elisp
magit-commit-amend
#+END_SRC
It is easier to go through the commit menu by pressing ~c~ and then selecting the amend option using ~a~.
*** Emacs and buffers from reddit
As a general principle, Emacs never deletes a buffer unless you explicitly tell it to do so, and this even goes for buffers that you might think of as "throw-away" buffers like the output of git diff. I don't know the reasoning for doing this, I would guess it has something to do with the fact that keeping things in memory is cheaper than waiting for a process to re-compute in the case you accidentally delete it, and it is better to let the user decide when the output of a process should be deleted.
